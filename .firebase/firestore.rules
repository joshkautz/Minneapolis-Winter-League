rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
 
   	// STANDINGS [Read]: Always
    match /standings/{document=**} {
      allow get, list:
      if true;
    }
    
    // GAMES [Read]: Always
    match /games/{document=**} {
      allow get, list:
      if true;
    }
 
    // PLAYERS [Read]: Always
    match /players/{document=**} {
      allow get, list:
      if true;
    }
    
    // PLAYERS [Create]:
    // Authenticated.
    // Authenticated user is creating their own document.
    match /players/{uid} {
      allow create:
      if request.auth != null &&
      request.auth.uid == uid
 		}

    // PLAYERS [Update]:
    // Authenticated.
    // Email is verified.
    // One of the following:
    // 	- [Player is updating their name]
    // 			- Authenticated user is updating their own document.
    // 			- Authenticated user is updating only Firstname or Lastname,
    // 	- [Player is creating a team]
    // 			- Authenticated user is updating their own document.
    // 			- Authenticated user is listed as a captain for the new team.
    // 			- Authenticated user is updating only Captain and Team,
    // 	- [Player is leaving their team]:
    // 			- Authenticated user is updating their own document.
    // 			- Authenticated user is updating only Captain and Team.
    // 			- Captain is false.
    // 			- Team is null.
    // 	- [Player is deleting their team]:
    // 			- Authenticated user is listed as a captain for the old team.
    // 			- Authenticated user is updating only Captain and Team.
    // 			- Captain is false.
    // 			- Team is null.
    // 	- [Player is removing a player from their team]:
    // 			- Authenticated user is listed as a captain for the updated player's previous team.
    // 			- Authenticated user is updating only Captain or Team.
    //			- The updated player's new team is null.
    //			- The udpated player's new captain status is false.
    // 	- [Player is promoting a player to captain]:
    // 			- Authenticated user is listed as a captain for the updated player's previous team.
    // 			- Authenticated user is updating only Captain.
    match /players/{uid} {
      allow update:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      (
      	(
          request.auth.uid == uid &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['firstname', 'lastname'])
    		) ||
        ( // Player is creating a team
          request.auth.uid == uid &&
    		  /databases/$(database)/documents/players/$(request.auth.uid) in get(request.resource.data.team).data.captains &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['captain', 'team'])
        ) ||
        ( // Player is leaving their team
        	request.auth.uid == uid &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['captain', 'team']) &&
          request.resource.data.captain == false &&
          request.resource.data.team == null
        ) ||
        ( // Player is deleting their team
    		  /databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['captain', 'team']) &&
          request.resource.data.captain == false &&
          request.resource.data.team == null
        ) ||
        (
        	/databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains &&
        	request.resource.data.diff(resource.data).affectedKeys().hasOnly(['captain', 'team']) &&
          request.resource.data.team == null &&
          request.resource.data.captain == false
    		) ||
        (
        	/databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains &&
        	request.resource.data.diff(resource.data).affectedKeys().hasOnly(['captain'])
    		)
      )
    }

    // TEAMS [Read]: Always
    match /teams/{document=**} {
      allow get, list:
      if true;
    }
    
    // TEAMS [Create]:
    // Authenticated.
    // Email is verified.
    // Authenticated user's captain value is false.
    // Authenticated user's team value is null.
    // Authenticated user is listed as a captain for the team.
    // Authenticated user is listed as a player for the team.
    match /teams/{document=**} {
      allow create:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      get(/databases/$(database)/documents/players/$(request.auth.uid)).data.captain == false &&
 			get(/databases/$(database)/documents/players/$(request.auth.uid)).data.team == null &&
      /databases/$(database)/documents/players/$(request.auth.uid) in request.resource.data.captains &&
      /databases/$(database)/documents/players/$(request.auth.uid) in request.resource.data.roster
 		}
    
		// TEAMS [Update]:
    // Authenticated.
    // Email is verified.
    // 	- [Player is leaving their team, is a Player]:
    // 		-	Authenticated user was listed as a player for the team being updated.
    // 		-	Authenticated user is updating only Roster.
    // 	- [Player is leaving their team, is a Captain]:
    // 		-	Authenticated user was listed as a captain for the team being updated.
    // 		-	Authenticated user is updating only Captains and Roster.
    match /teams/{document=**} {
      allow update:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      (
        ( // Player is leaving their team, is a Player
          /databases/$(database)/documents/players/$(request.auth.uid) in resource.data.roster &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roster'])
        )
        ||
        ( // Player is leaving their team, is a Captain
          /databases/$(database)/documents/players/$(request.auth.uid) in resource.data.captains &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roster', 'captains'])
        )
      )
		}

    // TEAMS [Delete]:
    // Authenticated.
    // Email is verified.
    // Authenticated user is listed as a captain for the team.
    match /teams/{document=**} {
      allow delete:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      /databases/$(database)/documents/players/$(request.auth.uid) in resource.data.captains
 		}

    // OFFERS [Read]:
    // Authenticated.
    // Email is verified.
    // One of the following:
    //  - Authenticated user is a captain of the team in the Offer.
    //  - Authenticated user is the player in the Offer.
    match /offers/{document=**} {
      allow get, list:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      (
      	/databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains ||
        request.auth.uid == get(resource.data.player).id
      )
    }

    // OFFERS [Create]:
    // Authenticated.
    // Email is verified.
    // The Status is Pending.
    // One of the following:
    //  - Authenticated user is a captain of the team in the Offer, and the creator is Captain.
    //  - Authenticated user is the player in the Offer, and the creator is Player.
    match /offers/{document=**} {
      allow create:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
			request.resource.data.status == 'pending' &&
      (
        // Authenticated user is a captain of the team in the Offer, and the creator is Captain.
        (
					/databases/$(database)/documents/players/$(request.auth.uid) in get(request.resource.data.team).data.captains &&
          request.resource.data.creator == 'captain'
        ) ||
        // Authenticated user is the player in the Offer, and the creator is Player.
        (
          request.auth.uid == get(request.resource.data.player).id &&
          request.resource.data.creator == 'player'
        )
      )
    }

    // OFFERS [Update]:
    // Authenticated.
    // Email is verified.
    // Only Status is updated.
    // One of the following:
    //  - Authenticated user is a captain of the team in the Offer, and the creator is Player.
    //  - Authenticated user is a captain of the team in the Offer, and the creator is Captain, and the status is Rejected.
    //  - Authenticated user is the player in the Offer, and the creator is Captain.
    //  - Authenticated user is the player in the Offer, and the creator is Player, and the status is Rejected.
    match /offers/{document=**} {
      allow update:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
				(
          // Authenticated user is a captain of the team in the Offer, and the creator is Player.
          (
            /databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains &&
            resource.data.creator == 'player'
          ) ||
          // Authenticated user is a captain of the team in the Offer, and the creator is Captain, and the status is Rejected.
          (
            /databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains &&
            resource.data.creator == 'captain' &&
            request.resource.data.status == 'rejected'
          ) ||
          // Authenticated user is the player in the Offer, and the creator is Captain.
          (
            request.auth.uid == get(resource.data.player).id &&
            resource.data.creator == 'captain'
          ) ||
          // Authenticated user is the player in the Offer, and the creator is Player, and the status is Rejected.
          (
            request.auth.uid == get(resource.data.player).id &&
            resource.data.creator == 'player' &&
            request.resource.data.status == 'rejected'
          )
        )
    }
    
    // OFFERS [Delete]:
    // Authenticated.
    // Email is verified.
    // [A Captain is deleting their team]:
    //  - Authenticated user is a captain of the team in the Offer.
    match /teams/{document=**} {
      allow delete:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      /databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains
 		}

    // Invertase Stripe Firebase Extension
    match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    // Invertase Stripe Firebase Extension
    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }
  }
}