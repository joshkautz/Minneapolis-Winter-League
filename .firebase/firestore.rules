rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
 
    // PLAYERS [Read]: Always
    match /players/{document=**} {
      allow get, list:
      if true;
    }

    // PLAYERS [Update]:
    // Authenticated.
    // Email is verified.
    // Authenticated user is updating their own document.
    // Only Firstname or Lastname is updated.
    match /players/{uid} {
      allow update:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      request.auth.uid == uid &&
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['firstname', 'lastname'])
    }

    // TEAMS [Read]: Always
    match /teams/{document=**} {
      allow get, list:
      if true;
    }
    
    // TEAMS [Create]:
    // Authenticated.
    // Email is verified.
    // Authenticated user's captain value is false.
    // Authenticated user's team value is null.
    // Authenticated user is listed as a captain for the team.
    // Authenticated user is listed as a player for the team.
    match /teams/{document=**} {
      allow create:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      get(/databases/$(database)/documents/players/$(request.auth.uid)).data.captain == false &&
 			get(/databases/$(database)/documents/players/$(request.auth.uid)).data.team == null &&
      /databases/$(database)/documents/players/$(request.auth.uid) in request.resource.data.captains &&
      /databases/$(database)/documents/players/$(request.auth.uid) in request.resource.data.roster
 		}

    // TEAMS [Delete]:
    // Authenticated.
    // Email is verified.
    // Authenticated user's captain value is true.
    // Authenticated user's team value is the team being deleted.
    // Authenticated user is listed as a captain for the team.
    // Authenticated user is listed as a player for the team.
    match /teams/{document=**} {
      allow delete:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      get(/databases/$(database)/documents/players/$(request.auth.uid)).data.captain == true &&
 			get(/databases/$(database)/documents/players/$(request.auth.uid)).data.team == resource['__name__'] &&
      /databases/$(database)/documents/players/$(request.auth.uid) in resource.data.captains &&
      /databases/$(database)/documents/players/$(request.auth.uid) in resource.data.roster
 		}

    // OFFERS [Read]:
    // Authenticated.
    // Email is verified.
    // One of the following:
    //  - Authenticated user is a captain of the team in the Offer.
    //  - Authenticated user is the player in the Offer.
    match /offers/{document=**} {
      allow get, list:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      (
      	/databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains ||
        request.auth.uid == get(resource.data.player).id
      )
    }

    // OFFERS [Create]:
    // Authenticated.
    // Email is verified.
    // The Status is Pending.
    // One of the following:
    //  - Authenticated user is a captain of the team in the Offer, and the creator is Captain.
    //  - Authenticated user is the player in the Offer, and the creator is Player.
    match /offers/{document=**} {
      allow create:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
			request.resource.data.status == 'pending' &&
      (
        // Authenticated user is a captain of the team in the Offer, and the creator is Captain.
        (
					/databases/$(database)/documents/players/$(request.auth.uid) in get(request.resource.data.team).data.captains &&
          request.resource.data.creator == 'captain'
        ) ||
        // Authenticated user is the player in the Offer, and the creator is Player.
        (
          request.auth.uid == get(request.resource.data.player).id &&
          request.resource.data.creator == 'player'
        )
      )
    }

    // OFFERS [Update]:
    // Authenticated.
    // Email is verified.
    // Only Status is updated.
    // One of the following:
    //  - Authenticated user is a captain of the team in the Offer, and the creator is Player.
    //  - Authenticated user is a captain of the team in the Offer, and the creator is Captain, and the status is Rejected.
    //  - Authenticated user is the player in the Offer, and the creator is Captain.
    //  - Authenticated user is the player in the Offer, and the creator is Player, and the status is Rejected.
    match /offers/{document=**} {
      allow update:
      if request.auth != null &&
      request.auth.token.email_verified == true &&
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
				(
          // Authenticated user is a captain of the team in the Offer, and the creator is Player.
          (
            /databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains &&
            resource.data.creator == 'player'
          ) ||
          // Authenticated user is a captain of the team in the Offer, and the creator is Captain, and the status is Rejected.
          (
            /databases/$(database)/documents/players/$(request.auth.uid) in get(resource.data.team).data.captains &&
            resource.data.creator == 'captain' &&
            request.resource.data.status == 'rejected'
          ) ||
          // Authenticated user is the player in the Offer, and the creator is Captain.
          (
            request.auth.uid == get(resource.data.player).id &&
            resource.data.creator == 'captain'
          ) ||
          // Authenticated user is the player in the Offer, and the creator is Player, and the status is Rejected.
          (
            request.auth.uid == get(resource.data.player).id &&
            resource.data.creator == 'player' &&
            request.resource.data.status == 'rejected'
          )
        )
    }

    // Invertase Stripe Firebase Extension
    match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    // Invertase Stripe Firebase Extension
    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }
  }
}