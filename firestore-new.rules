rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user's email is verified
    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/players/$(request.auth.uid)).data.admin == true;
    }
    
    // Helper function to check if user is captain of a team
    function isCaptainOfTeam(teamRef) {
      return isAuthenticated() && 
             teamRef != null &&
             get(teamRef).data.roster.hasAny([{'captain': true, 'player': /databases/$(database)/documents/players/$(request.auth.uid)}]);
    }
    
    // Helper function to check if user is on a team
    function isOnTeam(teamRef) {
      return isAuthenticated() && 
             teamRef != null &&
             get(teamRef).data.roster.hasAny([{'player': /databases/$(database)/documents/players/$(request.auth.uid)}]);
    }

    //////////////////////////////////////////////////////////////////////////////
    // PUBLIC READ ACCESS - No authentication required
    //////////////////////////////////////////////////////////////////////////////
    
    // SEASONS [Read]: Always - needed for registration flow
    match /seasons/{seasonId} {
      allow read: if true;
    }
    
    // GAMES [Read]: Always - public schedule
    match /games/{gameId} {
      allow read: if true;
    }
    
    // TEAMS [Read]: Always - public team information
    match /teams/{teamId} {
      allow read: if true;
    }
    
    // PLAYERS [Read]: Always - public player information (names only)
    match /players/{playerId} {
      allow read: if true;
    }

    //////////////////////////////////////////////////////////////////////////////
    // PLAYERS COLLECTION
    //////////////////////////////////////////////////////////////////////////////
    
    match /players/{playerId} {
      // PLAYERS [Create]: Only during user registration
      allow create: if isAuthenticated() && 
                       request.auth.uid == playerId &&
                       // Validate required fields
                       request.resource.data.keys().hasAll(['admin', 'firstname', 'lastname', 'email', 'seasons']) &&
                       // Validate admin is false for new users
                       request.resource.data.admin == false &&
                       // Validate email matches auth email
                       request.resource.data.email == request.auth.token.email;
      
      // PLAYERS [Update]: Very restricted - most updates should go through Functions
      allow update: if isEmailVerified() && 
                       request.auth.uid == playerId &&
                       // Only allow updating basic profile info
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['firstname', 'lastname']) &&
                       // Ensure admin status cannot be changed
                       request.resource.data.admin == resource.data.admin;
      
      // PLAYERS [Delete]: Only admins or the user themselves
      allow delete: if isEmailVerified() && 
                       (request.auth.uid == playerId || isAdmin());
    }

    //////////////////////////////////////////////////////////////////////////////
    // TEAMS COLLECTION
    //////////////////////////////////////////////////////////////////////////////
    
    match /teams/{teamId} {
      // TEAMS [Create]: Through Functions only - too complex for rules
      allow create: if false; // Force use of Functions
      
      // TEAMS [Update]: Very limited - most updates through Functions
      allow update: if isEmailVerified() && 
                       isCaptainOfTeam(resource.ref) &&
                       // Only allow basic team info updates
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'logo', 'storagePath']) &&
                       // Ensure critical fields cannot be changed
                       request.resource.data.roster == resource.data.roster &&
                       request.resource.data.season == resource.data.season &&
                       request.resource.data.teamId == resource.data.teamId;
      
      // TEAMS [Delete]: Through Functions only - needs cleanup
      allow delete: if false; // Force use of Functions
    }

    //////////////////////////////////////////////////////////////////////////////
    // OFFERS COLLECTION
    //////////////////////////////////////////////////////////////////////////////
    
    match /offers/{offerId} {
      // OFFERS [Read]: Only involved parties
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.player.id ||
                      isCaptainOfTeam(resource.data.team));
      
      // OFFERS [Create]: Basic validation, Functions handle complex logic
      allow create: if isEmailVerified() && 
                       request.resource.data.status == 'pending' &&
                       (
                         // Player creating request to join team
                         (request.auth.uid == request.resource.data.player.id &&
                          request.resource.data.type == 'request') ||
                         // Captain creating invitation for player
                         (isCaptainOfTeam(request.resource.data.team) &&
                          request.resource.data.type == 'invitation')
                       );
      
      // OFFERS [Update]: Accept/reject only, Functions handle side effects
      allow update: if isEmailVerified() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
                       request.resource.data.status in ['accepted', 'rejected'] &&
                       (
                         // Player responding to invitation
                         (request.auth.uid == resource.data.player.id &&
                          resource.data.type == 'invitation') ||
                         // Captain responding to request
                         (isCaptainOfTeam(resource.data.team) &&
                          resource.data.type == 'request')
                       );
      
      // OFFERS [Delete]: Cleanup by involved parties
      allow delete: if isEmailVerified() && 
                       (request.auth.uid == resource.data.player.id ||
                        isCaptainOfTeam(resource.data.team));
    }

    //////////////////////////////////////////////////////////////////////////////
    // GAMES COLLECTION
    //////////////////////////////////////////////////////////////////////////////
    
    match /games/{gameId} {
      // GAMES [Create/Update/Delete]: Admin only
      allow write: if isAdmin();
    }

    //////////////////////////////////////////////////////////////////////////////
    // SEASONS COLLECTION
    //////////////////////////////////////////////////////////////////////////////
    
    match /seasons/{seasonId} {
      // SEASONS [Create/Update/Delete]: Admin only
      allow write: if isAdmin();
    }

    //////////////////////////////////////////////////////////////////////////////
    // WAIVERS COLLECTION
    //////////////////////////////////////////////////////////////////////////////
    
    match /waivers/{waiverId} {
      // WAIVERS [Read]: User can read their own waivers
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.player.id;
      
      // WAIVERS [Create]: User can create their own waiver
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.player.id;
      
      // WAIVERS [Update/Delete]: Through Functions only
      allow update, delete: if false;
    }

    //////////////////////////////////////////////////////////////////////////////
    // STRIPE INTEGRATION (Invertase Extension)
    //////////////////////////////////////////////////////////////////////////////
    
    match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    //////////////////////////////////////////////////////////////////////////////
    // FALLBACK - DENY ALL OTHER ACCESS
    //////////////////////////////////////////////////////////////////////////////
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
