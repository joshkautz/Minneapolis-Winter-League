rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user's email is verified
    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    //////////////////////////////////////////////////////////////////////////////
    // PUBLIC READ ACCESS - Prioritizing open access to league information
    //////////////////////////////////////////////////////////////////////////////
    
    match /seasons/{seasonId} {
      allow read: if true;
      allow create: if false; // Force use of Functions
      allow update: if false; // Force use of Functions
      allow delete: if false; // Force use of Functions
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow create: if false; // Force use of Functions
      allow update: if false; // Force use of Functions
      allow delete: if false; // Force use of Functions
    }
    
    match /teams/{teamId} {
      allow read: if true;
      allow create: if false; // Use createTeamViaFunction
      allow update: if false; // Use editTeamViaFunction, manageTeamPlayerViaFunction
      allow delete: if false; // Use deleteTeamViaFunction
    }
    
    match /players/{playerId} {
      allow read: if true;
      allow create: if false; // Use createPlayerViaFunction
      allow update: if false; // Use updatePlayerViaFunction  
      allow delete: if false; // Use deletePlayerViaFunction
    }
    
    // OFFERS [Read]: Limited to involved parties only
    match /offers/{offerId} {
      allow read: if isAuthenticated() && 
                     (
                       // Player involved in the offer
                       request.auth.uid == resource.data.player.id ||
                       // Admin can see all offers
                       exists(/databases/$(database)/documents/players/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/players/$(request.auth.uid)).data.get('admin', false) == true
                     );
            allow create: if false; // Use createOfferViaFunction
      allow update: if false; // Use updateOfferStatusViaFunction 
      allow delete: if false; // Handled automatically by Functions
    }

    //////////////////////////////////////////////////////////////////////////////
    // USER-SPECIFIC SENSITIVE DATA - Restricted access
    //////////////////////////////////////////////////////////////////////////////
    
    // WAIVERS [Read/Write]: Users can only access their own waivers
    match /waivers/{waiverId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.player.id;
      
      // WAIVERS [Create]: User can create their own waiver
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.player.id &&
                       // Validate required fields
                       request.resource.data.keys().hasAll(['player', 'season', 'signed']);
      
      // WAIVERS [Update/Delete]: Through Functions only for audit trail
      allow update, delete: if false;
    }
    //////////////////////////////////////////////////////////////////////////////
    // STRIPE INTEGRATION - Secure payment data access
    //////////////////////////////////////////////////////////////////////////////
    
    // CUSTOMERS: Users can only access their own payment data
    match /customers/{uid} {
      allow read: if isAuthenticated() && request.auth.uid == uid;
      
      // Checkout sessions: User-specific
      match /checkout_sessions/{id} {
        allow read, write: if isAuthenticated() && request.auth.uid == uid;
      }
      
      // Subscriptions: Read-only for users
      match /subscriptions/{id} {
        allow read: if isAuthenticated() && request.auth.uid == uid;
      }
      
      // Payments: Read-only for users  
      match /payments/{id} {
        allow read: if isAuthenticated() && request.auth.uid == uid;
      }
    }
    
    // PRODUCTS: Public read access for pricing display
    match /products/{id} {
      allow read: if true;
      
      match /prices/{id} {
        allow read: if true;
      }
      
      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    //////////////////////////////////////////////////////////////////////////////
    // FALLBACK - DENY ALL OTHER ACCESS
    //////////////////////////////////////////////////////////////////////////////
    
    // Explicit deny for any paths not covered above
    match /{document=**} {
      allow read, write: if false;
    }
  }
}